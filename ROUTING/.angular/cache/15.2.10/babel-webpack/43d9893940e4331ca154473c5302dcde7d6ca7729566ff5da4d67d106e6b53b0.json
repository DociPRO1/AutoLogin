{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Leke/OneDrive/Desktop/ANGULAR/AutoLogin/ROUTING/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./connection.service\";\nimport * as i2 from \"@angular/router\";\nexport class WebserviceService {\n  constructor(connectionService, router) {\n    this.connectionService = connectionService;\n    this.router = router;\n    this.serverData = [];\n    this.dataZips = [];\n    this.mySqlUsers = [];\n    this.myCars = [];\n    this.loginData = [];\n  }\n  getUsers(numUsers) {\n    this.connectionService.sendGetRequest(numUsers).subscribe(data => {\n      console.log(data.results);\n      this.serverData = data.results;\n    }, error => {\n      console.log(\"Errore Get Server Data\");\n      console.log(error);\n    });\n  }\n  getZips(endPoint) {\n    this.connectionService.sendGetRequestZips(endPoint).subscribe(data => {\n      console.log(data);\n      this.dataZips = data;\n    }, error => {\n      console.log(\"Errore Get Server Data\");\n      console.log(error);\n    });\n  }\n  insertZips(citta, stato, pop, id) {\n    let par = {\n      c: citta,\n      s: stato,\n      p: pop,\n      id: id\n    };\n    this.connectionService.sendPostRequestZips('addZip', par).subscribe(data => {\n      console.log(\"Id ricevuto dal server:\" + data);\n      console.log(data);\n    }, error => {\n      console.log(\"Errore esecuzione web service post\");\n      console.log(error);\n    });\n  }\n  getUtentiMySql(endPoint) {\n    this.connectionService.sendGetRequestZips(endPoint).subscribe(data => {\n      console.log(data);\n      this.mySqlUsers = data;\n    }, error => {\n      console.log(\"Errore Get Server Data\");\n      console.log(error);\n    });\n  }\n  getCarsSql(endPoint) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield new Promise((resolve, reject) => _this.connectionService.getCars(endPoint).subscribe(data => {\n        console.log(data);\n        _this.myCars = data;\n        resolve(data);\n      }, error => {\n        console.log(\"Errore Get Server Data\");\n        console.log(error);\n        reject(error);\n      }));\n    })();\n  }\n  verifyLogin(email, password) {\n    let par = {\n      e: email,\n      p: password\n    };\n    this.connectionService.sendVerifyLogin('verifyLogin', par).subscribe(data => {\n      console.log(data);\n      if (data.successo == 'ok') {\n        this.router.navigate(['/auto']);\n      } else {\n        alert(\"Errore Login\");\n      }\n    }, error => {\n      console.log(\"Errore esecuzione web service post\");\n      console.log(error);\n    });\n  }\n  static #_ = this.ɵfac = function WebserviceService_Factory(t) {\n    return new (t || WebserviceService)(i0.ɵɵinject(i1.ConnectionService), i0.ɵɵinject(i2.Router));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebserviceService,\n    factory: WebserviceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"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","names":["WebserviceService","constructor","connectionService","router","getUsers","numUsers","sendGetRequest","subscribe","data","console","log","results","serverData","error","getZips","endPoint","sendGetRequestZips","dataZips","insertZips","citta","stato","pop","id","par","c","s","p","sendPostRequestZips","getUtentiMySql","mySqlUsers","getCarsSql","Promise","resolve","reject","getCars","myCars","verifyLogin","email","password","e","sendVerifyLogin","successo","navigate","alert","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Leke\\OneDrive\\Desktop\\ANGULAR\\AutoLogin\\ROUTING\\src\\app\\service\\webservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ConnectionService} from \"./connection.service\";\nimport {Router} from \"@angular/router\";\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebserviceService {\n\n    constructor(private connectionService: ConnectionService, private router: Router) {\n    }\n\n    serverData: any = [];\n    dataZips: any = [];\n    mySqlUsers: any = [];\n    myCars: any = [];\n\n    getUsers(numUsers: number) {\n        this.connectionService.sendGetRequest(numUsers).subscribe(\n            (data: any) => {//equivalente a .done di ajax\n                console.log(data.results);\n                this.serverData = data.results;\n            },\n            (error: any) => {//equivalente a .fail di ajax\n                console.log(\"Errore Get Server Data\")\n                console.log(error)\n            }\n        )\n    }\n\n    getZips(endPoint: string) {\n        this.connectionService.sendGetRequestZips(endPoint).subscribe(\n            (data: any) => {//equivalente a .done di ajax\n                console.log(data);\n                this.dataZips = data;\n            },\n            (error: any) => {//equivalente a .fail di ajax\n                console.log(\"Errore Get Server Data\")\n                console.log(error)\n            }\n        )\n    }\n\n    insertZips(citta: string, stato: string, pop: number, id: string) {\n        let par = {\n            c: citta,\n            s: stato,\n            p: pop,\n            id: id\n        }\n        this.connectionService.sendPostRequestZips('addZip', par).subscribe(\n            (data: any) => {\n\n                console.log(\"Id ricevuto dal server:\" + data);\n                console.log(data);\n            },\n            (error: any) => {\n                console.log(\"Errore esecuzione web service post\")\n                console.log(error)\n            }\n        )\n\n    }\n\n    getUtentiMySql(endPoint: string) {\n        this.connectionService.sendGetRequestZips(endPoint).subscribe(\n            (data: any) => {//equivalente a .done di ajax\n                console.log(data);\n                this.mySqlUsers = data;\n            },\n            (error: any) => {//equivalente a .fail di ajax\n                console.log(\"Errore Get Server Data\")\n                console.log(error)\n            }\n        )\n\n    }\n\n    async getCarsSql(endPoint: string) {\n        await new Promise((resolve,reject) =>\n            this.connectionService.getCars(endPoint).subscribe(\n                (data: any) => {\n                    console.log(data);\n                    this.myCars = data;\n                    resolve(data);\n                },\n                (error: any) => {\n                    console.log(\"Errore Get Server Data\")\n                    console.log(error)\n                    reject(error);\n                }\n\n            )\n        )\n\n\n\n\n    }\n\n    loginData : any = [];\n    verifyLogin(email: string, password: string) {\n\n        let par = {\n            e: email,\n            p: password\n        }\n        this.connectionService.sendVerifyLogin('verifyLogin', par).subscribe(\n            (data: any) => {\n                console.log(data);\n                if (data.successo == 'ok')\n                {\n                    this.router.navigate(['/auto']);\n\n                }\n                else {\n                    alert(\"Errore Login\")\n                }\n            },\n            (error: any) => {\n                console.log(\"Errore esecuzione web service post\")\n                console.log(error)\n            }\n        )\n    }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}