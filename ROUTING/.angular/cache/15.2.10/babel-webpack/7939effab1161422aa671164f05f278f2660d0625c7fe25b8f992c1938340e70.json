{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./connection.service\";\nexport class WebserviceService {\n  constructor(connectionService) {\n    this.connectionService = connectionService;\n    this.serverData = [];\n    this.dataZips = [];\n    this.mySqlUsers = [];\n  }\n  getUsers(numUsers) {\n    this.connectionService.sendGetRequest(numUsers).subscribe(data => {\n      console.log(data.results);\n      this.serverData = data.results;\n    }, error => {\n      console.log(\"Errore Get Server Data\");\n      console.log(error);\n    });\n  }\n  getZips(endPoint) {\n    this.connectionService.sendGetRequestZips(endPoint).subscribe(data => {\n      console.log(data);\n      this.dataZips = data;\n    }, error => {\n      console.log(\"Errore Get Server Data\");\n      console.log(error);\n    });\n  }\n  insertZips(citta, stato, pop, id) {\n    let par = {\n      c: citta,\n      s: stato,\n      p: pop,\n      id: id\n    };\n    this.connectionService.sendPostRequestZips('addZip', par).subscribe(data => {\n      console.log(\"Id ricevuto dal server:\" + data);\n      console.log(data);\n    }, error => {\n      console.log(\"Errore esecuzione web service post\");\n      console.log(error);\n    });\n  }\n  getUtentiMySql(endPoint) {\n    this.connectionService.sendGetRequestZips(endPoint).subscribe(data => {\n      console.log(data);\n      this.mySqlUsers = data;\n    }, error => {\n      console.log(\"Errore Get Server Data\");\n      console.log(error);\n    });\n  }\n  verifyLogin(email, password) {\n    return this.connectionService.sendVerifyLogin(email, password);\n  }\n  static #_ = this.ɵfac = function WebserviceService_Factory(t) {\n    return new (t || WebserviceService)(i0.ɵɵinject(i1.ConnectionService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: WebserviceService,\n    factory: WebserviceService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":";;AAMA,OAAM,MAAOA,iBAAiB;EAE5BC,YAAoBC,iBAAqC;IAArC,sBAAiB,GAAjBA,iBAAiB;IACrC,eAAU,GAAK,EAAE;IACjB,aAAQ,GAAK,EAAE;IACf,eAAU,GAAK,EAAE;EAH4C;EAI7DC,QAAQ,CAACC,QAAgB;IACvB,IAAI,CAACF,iBAAiB,CAACG,cAAc,CAACD,QAAQ,CAAC,CAACE,SAAS,CACpDC,IAAS,IAAG;MACXC,OAAO,CAACC,GAAG,CAACF,IAAI,CAACG,OAAO,CAAC;MACzB,IAAI,CAACC,UAAU,GAAEJ,IAAI,CAACG,OAAO;IAC/B,CAAC,EACAE,KAAU,IAAG;MACVJ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCD,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACtB,CAAC,CACJ;EACH;EAEEC,OAAO,CAACC,QAAiB;IACrB,IAAI,CAACZ,iBAAiB,CAACa,kBAAkB,CAACD,QAAQ,CAAC,CAACR,SAAS,CACxDC,IAAS,IAAG;MACTC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI,CAACS,QAAQ,GAAET,IAAI;IACvB,CAAC,EACAK,KAAU,IAAG;MACVJ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCD,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACtB,CAAC,CACJ;EACL;EAEAK,UAAU,CAACC,KAAY,EAAEC,KAAY,EAACC,GAAW,EAAEC,EAAS;IACxD,IAAIC,GAAG,GAAG;MACNC,CAAC,EAACL,KAAK;MACPM,CAAC,EAACL,KAAK;MACPM,CAAC,EAACL,GAAG;MACLC,EAAE,EAACA;KACN;IACD,IAAI,CAACnB,iBAAiB,CAACwB,mBAAmB,CAAC,QAAQ,EAACJ,GAAG,CAAC,CAAChB,SAAS,CAC7DC,IAAS,IAAG;MAETC,OAAO,CAACC,GAAG,CAAC,yBAAyB,GAAGF,IAAI,CAAC;MAC7CC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;IACrB,CAAC,EACAK,KAAU,IAAG;MACVJ,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACjDD,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACtB,CAAC,CACJ;EAEL;EAEAe,cAAc,CAACb,QAAgB;IAE3B,IAAI,CAACZ,iBAAiB,CAACa,kBAAkB,CAACD,QAAQ,CAAC,CAACR,SAAS,CACxDC,IAAS,IAAG;MACTC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,IAAI,CAACqB,UAAU,GAAErB,IAAI;IACzB,CAAC,EACAK,KAAU,IAAG;MACVJ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;MACrCD,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACtB,CAAC,CACJ;EAEL;EAEAiB,WAAW,CAACC,KAAa,EAAEC,QAAgB;IAEvC,OAAO,IAAI,CAAC7B,iBAAiB,CAAC8B,eAAe,CAACF,KAAK,EAAEC,QAAQ,CAAC;EAClE;EAAC;qBAvEQ/B,iBAAiB;EAAA;EAAA;WAAjBA,iBAAiB;IAAAiC,SAAjBjC,iBAAiB;IAAAkC,YAFhB;EAAM","names":["WebserviceService","constructor","connectionService","getUsers","numUsers","sendGetRequest","subscribe","data","console","log","results","serverData","error","getZips","endPoint","sendGetRequestZips","dataZips","insertZips","citta","stato","pop","id","par","c","s","p","sendPostRequestZips","getUtentiMySql","mySqlUsers","verifyLogin","email","password","sendVerifyLogin","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Leke\\OneDrive\\Desktop\\ANGULAR\\ROUTING\\src\\app\\service\\webservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {ConnectionService} from \"./connection.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebserviceService {\n\n  constructor(private connectionService : ConnectionService) { }\n  serverData:any=[];\n  dataZips:any=[];\n  mySqlUsers:any=[];\n  getUsers(numUsers: number){\n    this.connectionService.sendGetRequest(numUsers).subscribe(\n        (data: any)=>{//equivalente a .done di ajax\n          console.log(data.results);\n          this.serverData= data.results;\n        },\n        (error: any)=>{//equivalente a .fail di ajax\n            console.log(\"Errore Get Server Data\")\n            console.log(error)\n        }\n    )\n  }\n\n    getZips(endPoint : string){\n        this.connectionService.sendGetRequestZips(endPoint).subscribe(\n            (data: any)=>{//equivalente a .done di ajax\n                console.log(data);\n                this.dataZips= data;\n            },\n            (error: any)=>{//equivalente a .fail di ajax\n                console.log(\"Errore Get Server Data\")\n                console.log(error)\n            }\n        )\n    }\n\n    insertZips(citta:string, stato:string,pop: number, id:string){\n        let par = {\n            c:citta,\n            s:stato,\n            p:pop,\n            id:id\n        }\n        this.connectionService.sendPostRequestZips('addZip',par).subscribe(\n            (data: any)=>{\n\n                console.log(\"Id ricevuto dal server:\" + data);\n                console.log(data);\n            },\n            (error: any)=>{\n                console.log(\"Errore esecuzione web service post\")\n                console.log(error)\n            }\n        )\n\n    }\n\n    getUtentiMySql(endPoint: string)\n    {\n        this.connectionService.sendGetRequestZips(endPoint).subscribe(\n            (data: any)=>{//equivalente a .done di ajax\n                console.log(data);\n                this.mySqlUsers= data;\n            },\n            (error: any)=>{//equivalente a .fail di ajax\n                console.log(\"Errore Get Server Data\")\n                console.log(error)\n            }\n        )\n\n    }\n\n    verifyLogin(email: string, password: string) {\n\n        return this.connectionService.sendVerifyLogin(email, password);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}